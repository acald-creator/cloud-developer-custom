service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:

  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  
  environment:
    TODOS_TABLE: Todos=${self:provider.stage}
    INDEX_NAME: USER_ID
    IMAGES_S3_BUCKET: serverless-udagram-images-${self:provider.stage}
    AUTH_0_SECRET: prhHoRkm5faCr1igkclfLT5wK8dsr5t20f1te0q-9qkmskMgJlOhJin9qdGa0k6W

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
  
  # TODO, check using SNS for this section
  SendUploadNotifications:
    environment:
        STAGE: ${self:provider.stage}
        API_ID:
            Ref: WebsocketsApi
    handler: src/lambda/s3/sendNotifications.handler
    events:
        - sns:
            arn:
                Fn::Join:
                    - ':'
                    -   - arn:aws:sns
                        - Ref: AWS::Region
                        - Ref: AWS::AcountId
                        - ${self:custom:topicName}
    # TODO test the websocket connections and elasticsearch
    ConnectHandler:
        handler: src/lambda/websocket/connect.handler
        events:
            - websocket:
                route: $connect
    
    DisconnectHandler:
        handler: src/lambda/websocket/disconnect.handler
        events:
            - websocket:
                route: $disconnect
                
# TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
     iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self.provider.environment.TODOS_TABLE}/index/${self:provider.environment.INDEX_NAME}
     

  # TODO: Configure this function
  GetTodos:
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo item
            description: Create a new todo item
            requestModels:
              'application/json': CreateRequest

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          documentation:
            summary: Update an existing todo item
            description: Update an existing todo item
            requestModels:
              'application/json': UpdateRequest

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          documentation:
            summary: Delete a todo item
            description: Delete a todo item

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GroupsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.INDEX_NAME}
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
              
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
